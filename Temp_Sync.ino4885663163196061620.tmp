float getTemp (){  
  // Get the temprature
  
  SensorAverage = 0;  //Using an average mechinisum for accuracy.  Start by settimg the value to 0.  
  int i;              // Create variable for the counting of the sensor values

  for(i=0; i<Count; i++)
  {
    sensorVal = analogRead(temp); // Get the voltage measured at the analogue input
    SensorAverage = SensorAverage + sensorVal;
    
    timeString = getthertcTime();        //Get the time from the realtime clock
    if (seconds < 30 || seconds > 45){   //It is not between 30 and 45 seconds on the clock.  
        displayTime(timeString);         //Display the time
      }
     else{                               //It is between 30 and 45 seconds on the clock
       inttemp = int(temperature);       //Get the temperature value ready for display
       displaytemp = String(inttemp);    //Convert it to a string
       displayTemp(displaytemp);         //Display the temperature
     }
  }  
  
  //Calculate the temp from the from the reading
   
  sensorVal = SensorAverage / Count;     //Find the average value that was calculated
  voltage = (sensorVal/1024.0) * 4.25;    //Calculate the voltage from the average value calculated
  temperature = (voltage - 0.5) * 100;   //Calculate the tempreture from the voltage calculated
  
  //Check to see if the temp has drifted from a reasonable range
  //If the temp has risen above 26 degrees - reset the Arduino

  Serial.print("Temp ");
  Serial.print(temperature);
  Serial.print(" (");
  Serial.print(delayCount);
  Serial.println(")");
  if (temperature > 26) {
    Serial.println("Inside the checking loop");

    int delayAdjust = delayOffset - 1;
    int green_adjust = 765 * delayAdjust;
    Serial.print ("Setting green ");
    Serial.print (delayCount);
    Serial.print (" adjust ");
    Serial.print(delayAdjust);
    Serial.print(" green adjust ");
    Serial.print (green_adjust);
    Serial.print(" Adjusted ");
    Serial.print(delayCount - green_adjust);
    Serial.print(" Offset ");
    Serial.println(delayOffset);
    if (delayCount - green_adjust < 256) {
      green = delayCount - green_adjust; 
      red = 0;
      blue = 0;
    }
    if (delayCount - green_adjust > 255 && delayCount - green_adjust < 511) {
    //if (delayCount/delayOffset > 255 && delayCount/delayOffset < 511) {
      //resetFunc();  //Call the reset function as the temprature has risen too high  
      red = delayCount - green_adjust - 255;
    }
    if (delayCount - green_adjust > 510) {
      blue = delayCount - green_adjust - 510;
    }
    
    //if (delayCount <= 8) {
      //delayOffset = delayCount;
    //}
    //else if (delayCount > 8 && delayCount < 17) {
      //delayOffset = delayCount - 9;
    //}
    //else {
      //delayOffset = delayCount - 16;
    //}
    //Serial.print("Setting the lights (");
    //Serial.print(delayOffset);
    //Serial.print(", ");
    //Serial.print(delayCount);
    //Serial.println(")");
    //Serial.print("Red: ");
    //Serial.print(red);
    //Serial.print(", green ");
    //Serial.print(green);
    //Serial.print(", blue ");
    //Serial.print(blue);
    //Serial.print(" Lights On = ");
    //Serial.println(lights_on);
    if (delayCount == 0.9) {
       setColours(strip.Color(0, 0, 0), 0, 8);   //Set all the lights to off
       //setColours(strip.Color(red, green, blue), 0, delayOffset); //Show that the delay counter is running
    }
    //if (delayCount > 0 && delayCount < 9 && lights_on == 'Y') {
      //setColours(strip.Color(red, green, blue), 0, delayOffset); //Show that the delay counter is running
    //}
    
    if (lights_on == 'Y') {
      //Serial.print("Switch on the lights = Green ");
      //Serial.println(green);
      setColours(strip.Color(red, green, blue), 0, delayOffset);  
      setColours(strip.Color(255, 255, 255), 0, delayOffset -1);   
    }

    //if (delayCount > 16) {
      //setColours(strip.Color(red, green, blue), 0, delayOffset);
    //}

    if (delayCount - green_adjust == 765){
      delayOffset++; 
    }
    
    //delayCount++;
    delayCount = delayCount + 15.0;
    //delay (20000);
  }
  else if (delayCount > 0)
  {
    delayCount = 0;  
  }
  
  //Put the reset code in here ^^^
 
  int offset = int(temperature-17);     //Adjust the temprature ready for dislay on the neo-pixels (it starts at 17 dgrees)
  int timeset = hours * 100;
  timeset = timeset + minutes;

  //Serial.print("Timset ");
  //Serial.println(timeset);
  if (timeset < 2235 && timeset > morningon) {        //Only light up the neo-pixels between the hours of 7:00 am and 11:00pm 
    if (delayCount < 1) {
      setColours(strip.Color(0, 0, 255), 0, 8);   //Set all the lights to blue
      int midlights = 7 - offset;                  //Calculate first of the middle (pink) lights.  7 in the strip - the lights to turn red
    
      if (midlights > 0){                         //If not all the lights are red turn some pink
        for (int l=offset+midlights; l>offset; l--){
             int val = 255/(midlights+2);          //Calculate a shade of pink to start with
             int change = val*(l-offset);          //Adjust it by the light that is been lit (make to bluer nearer the blue light)
             int r = (255 - change);               //Calculate the red value (making it less red)
             int b = (0 + change);                 //Calculate the blue value (making it more blue)
   
             setColours(strip.Color(r, 0, b), 0, l); //Set the value of the light based on the calculated value
        }
    }
    setColours(strip.Color(255, 0, 0), 0, offset); //If it is between 11:00pm and 7:00 am switch all the neo-pixals off
    }
    lights_on = 'Y';
  }
  else 
  {
    //Serial.print("Inside the else");
    setColours(strip.Color(0, 0, 0), 0, 8);   //Set all the lights to off
    lights_on = 'N';
  }
  return (temperature); 
}
